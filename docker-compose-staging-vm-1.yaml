version: '3.5'

networks:
  web-app-net:
    name: my-web-app-net
    #driver: overlay
    driver: bridge

volumes:
  mysql-db-storage:
  pg-authDB-storage:
  pgadmin-authDB-data:
  pg-userProfileDB-storage:
  pg-trainingDB-storage:

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - web-app-net

  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      #Place Device-Current IP Or EC2-Private-IP
      #To connect from an external machine, change localhost to your host's external IP/hostname,
      #EXTERNAL://localhost:9093, If we need to access the kafka from our host-machine for debug purpose.
      #EXTERNAL://<ec2-private-ip>:9093, In case of aws-ec2 instance, we have to broadcast on the ec2's private ip, other wise can't be listen from other ec2 instance.
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_LISTENERS=CLIENT://:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      #
    depends_on:
      - zookeeper
    networks:
      - web-app-net

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - 8091:8080
    restart: on-failure
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_READONLY=false
    depends_on:
      - kafka
    networks:
      - web-app-net

  mysql-db:
    image: mysql:8.0.13
    environment:
      MYSQL_DATABASE: testDB
      MYSQL_ROOT_PASSWORD: root@123
    ports:
      - 3306:3306
    networks:
      - web-app-net
    volumes:
      - mysql-db-storage:/var/lib/mysql

  phpadmin-auth:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mysql-db
      PMA_PORT: 3306
      PMA_PMADB: testDB
      MYSQL_ROOT_PASSWORD: root@123
    ports:
      - 8092:80
    networks:
      - web-app-net
    depends_on:
      - mysql-db
    restart: on-failure

  pg-authDB:
    image: postgres
    environment:
      POSTGRES_DB: authDB
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root@123
    ports:
      - 5432:5432
    networks:
      - web-app-net
    volumes:
      - pg-authDB-storage:/var/lib/postgresql/data

  pgadmin-authDB:
    image: dpage/pgadmin4
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: root@mypage.com
      PGADMIN_DEFAULT_PASSWORD: root@123
    volumes:
      - pgadmin-authDB-data:/var/lib/pgadmin
    restart: on-failure
    networks:
      - web-app-net
    depends_on:
      - pg-authDB

  pg-userProfileDB:
    image: postgres
    environment:
      POSTGRES_DB: userProfileDB
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root@123
    ports:
      - 5433:5432
    networks:
      - web-app-net
    volumes:
      - pg-userProfileDB-storage:/var/lib/postgresql/data

  pg-trainingDB:
    image: postgres
    environment:
      POSTGRES_DB: trainingDB
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root@123
    ports:
      - 5434:5432
    networks:
      - web-app-net
    volumes:
      - pg-trainingDB-storage:/var/lib/postgresql/data

  eureka-service-discovery:
    image: engrajibkumerghosh/ms-training-repo-v1:eureka-service-discovery-v1.0
    environment:
      management.endpoints.web.exposure.include: health,metrics,httptrace,prometheus
    ports:
      - 801:801
    restart: on-failure
    networks:
      - web-app-net

  auth-service:
    image: engrajibkumerghosh/ms-training-repo-v1:auth-service-v1.0
    environment:
      management.endpoints.web.exposure.include: health,metrics,httptrace,prometheus
      app.eureka.service.host: eureka-service-discovery
      app.eureka.service.port: 801
      app.redis.host: redis
      app.redis.port: 6379
      app.mail.host: 192.168.221.144
      app.mail.port: 587
      app.activemq.host: activemq
      app.activemq.port: 61616
      app.db.host: pg-authDB
      app.db.port: 5432
    ports:
      - 8083:8083
    depends_on:
      - eureka-service-discovery
    restart: on-failure
    networks:
      - web-app-net

  first-service:
    image: engrajibkumerghosh/ms-training-repo-v1:first-service-v1.0
    environment:
      management.endpoints.web.exposure.include: health,metrics,httptrace,prometheus
      app.home.logs: /home/logs
      app.eureka.service.host: eureka-service-discovery
      app.eureka.service.port: 801
    ports:
      - 8081:8081
    depends_on:
      - eureka-service-discovery
    restart: on-failure
    networks:
      - web-app-net

  user-profile:
    image: engrajibkumerghosh/ms-training-repo-v1:user-profile-v1.0
    environment:
      management.endpoints.web.exposure.include: health,metrics,httptrace,prometheus
      app.eureka.service.host: eureka-service-discovery
      app.eureka.service.port: 801
    ports:
      - 8084:8084
    depends_on:
      - eureka-service-discovery
    restart: on-failure
    networks:
      - web-app-net

  training-management:
    image: engrajibkumerghosh/ms-training-repo-v1:training-management-v1.0
    environment:
      management.endpoints.web.exposure.include: health,metrics,httptrace,prometheus
      app.eureka.service.host: eureka-service-discovery
      app.eureka.service.port: 801
    ports:
      - 8086:8086
    depends_on:
      - eureka-service-discovery
    restart: on-failure
    networks:
      - web-app-net

  enrolment-deferment-exemption:
    image: engrajibkumerghosh/ms-training-repo-v1:enrolment-deferment-exemption-v1.0
    environment:
      management.endpoints.web.exposure.include: health,metrics,httptrace,prometheus
      app.eureka.service.host: eureka-service-discovery
      app.eureka.service.port: 801
    ports:
      - 8087:8087
    depends_on:
      - eureka-service-discovery
    restart: on-failure
    networks:
      - web-app-net

#end of scripts